server:
  port: 8080

spring:
  config:
    import: application-API-KEY.yml

  datasource:
    data:
      driver-class-name: org.mariadb.jdbc.Driver
      jdbc-url: ${SPRING_DATASOURCE_DATA_URL}
      username: ${SPRING_DATASOURCE_DATA_USERNAME}
      password: ${SPRING_DATASOURCE_DATA_PASSWORD}
    meta:
      driver-class-name: org.mariadb.jdbc.Driver
      jdbc-url: ${SPRING_DATASOURCE_META_URL}
      username: ${SPRING_DATASOURCE_META_USERNAME}
      password: ${SPRING_DATASOURCE_META_PASSWORD}

  redis:
    host: redis
    port: 6380
    timeout: 10000ms
    jedis:
      enabled: false

  output:
    ansi:
      enabled: always

  jwt:
    secret: ${jwt.secret}
    access-token-expiration: 1800000
    refresh-token-expiration: 259200000

  security:
    oauth2:
      client:
        registration:
          google:
            client-name: google
            client-id: ${oauth.google.client-id}
            client-secret: ${oauth.google.client-secret}
            redirect-uri: http://localhost:8080/login/oauth2/code/google
            authorization-grant-type: authorization_code
            scope:
              - profile
              - email
          naver:
            client-name: naver
            client-id: ${oauth.naver.client-id}
            client-secret: ${oauth.naver.client-secret}
            redirect-uri: http://localhost:8080/login/oauth2/code/naver
            authorization-grant-type: authorization_code
            scope:
              - name
              - email
        provider:
          naver:
            authorization-uri: https://nid.naver.com/oauth2.0/authorize
            token-uri: https://nid.naver.com/oauth2.0/token
            user-info-uri: https://openapi.naver.com/v1/nid/me
            user-name-attribute: response

  batch:
    job:
      enabled: false
    jdbc:
      initialize-schema: always
      # schema: classpath:org/springframework/batch/core/schema-mysql.sql

cloud:
  config:
    import: application-API-KEY.yml
  aws:
    credentials:
      access-key: ${aws.credentials.access-key}
      secret-key: ${aws.credentials.secret-key}
    region:
      static: ${aws.region.static}
    s3:
      bucket: ${aws.s3.bucket}

logging:
  level:
    org:
      springframework: DEBUG
      hibernate:
        SQL: DEBUG
  file:
    name: logs/application.log
    max-size: 10MB

